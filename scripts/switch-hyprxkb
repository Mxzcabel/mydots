#! /bin/bash
#------------------------------------------------------------------
#- Script by: mxzcabel
#- https://github.com/mxzcabel
#- Date: 24/08/03
#- Last update date: 24/11/14
#- https://wiki.hyprland.org/IPC/#xdg_runtime_dirhyprhissocketsock
#- Description: This script activate other keymaps for specific
#-------------- applications and trigger back to the original if
#-------------- any other 'activewindow' event is detected.
#-------------- in this example Emacs is the triggered application.
#------------------------------------------------------------------
#
#---------/---------/------------/--------------/------------------
# Keyboard device name
myKeyboards=("g915-keyboard-keyboard" "logitech-usb-receiver-keyboard" "logitech-g915-wireless-rgb-mechanical-gaming-keyboard-consumer-control" "logitech-g915-wireless-rgb-mechanical-gaming-keyboard-system-control" "logitech-g915-wireless-rgb-mechanical-gaming-keyboard")
# The application you desire to switch keymaps
application="[Ee]\macs"
# The language keyboard will set back
language="English"
#---------/---------/------------/--------------/------------------
# Detect if the specific keyboard is available
function getKeyboard () {
  printf '%s' "$(hyprctl devices | sed -n 's/\('$1'\)$/\1/p')"
}
#---------/---------/------------/--------------/------------------
# Change keyboard if a match is detected
function isThereMyKeyboard () {
  ## Get all the list and search for the available keyboard
  for keyboard in "${myKeyboards[@]}"
  do
    ## If the keyboard has a match with a current device input,
    ## include it on the list, or else exclude it, if in there
    if [[ -n $(getKeyboard "$keyboard") ]]; then
      [[ ! ${device[@]} =~ (^|[[:space:]])"$keyboard"($|[[:space:]]) ]] && device+=($keyboard)
    else
      ## If the quoted expanded device array (@Q) already exists,
      ## proceed with verification.
      if [[ -n ${device[@]@Q} ]]; then
        ## For each index if there's a match,
        ## then remove it from the list
        for mapindex in ${!device[@]}
        do
          [[ ${device[$mapindex]} =~ "$keyboard" ]] && unset "device[$mapindex]"
        done
      fi
    fi
  done
  ## At last check if the array have any variable at all
  ## before continuing to change the keymap variant/layout
  [[ ${#device[@]} -ge 1 ]] && return 0 || return 1
}
#---------/---------/------------/--------------/------------------
# Get the match language to set back keymap layout
function getKeymap () {
  printf '%s' $(printf '%s' $(hyprctl devices -j | awk '/'$1'/{n=7} n>0{n--; if (n==0) print}' | sed -n 's/.*\('$language'\).*/\1/p'))
}
#---------/---------/------------/--------------/------------------
# Get desired application within socket2
function detectedApp () {
  printf '%s' "$(printf '%s' $1 | sed -n 's/\(activewindow>>'$application',\)/\1/g p')"
}
#---------/---------/------------/--------------/------------------
# Get any other window name within socket2
function anyOtherWindow () {
  printf '%s' "$(printf '%s' $1 | sed -n 's/\(activewindow>>\)/\1/g p' | sed -e '/'$application',.*/d')"
}
#---------/---------/------------/--------------/------------------
# Handle the process to set the desire keymap for chosen keyboard
function handle () {
  if isThereMyKeyboard; then
  ## Switch to second keymap if application is an activewindow
    if [[ -n $(detectedApp "$1") ]]; then
      for keyboard in "${device[@]}"
      do
        if [[ $(getKeymap "$keyboard") == $language ]]; then
          hyprctl switchxkblayout $keyboard 1 >/dev/null
        fi
      done
    else
    ## Switch to the main keymap if any other application is an activewindow
      if [[ -n $(anyOtherWindow "$1") ]]; then
        for keyboard in "${device[@]}"
        do
          if [[ $(getKeymap "$keyboard") != $language ]]; then
            hyprctl switchxkblayout $keyboard 0 >/dev/null
          fi
        done
      fi
    fi
  fi
}
#---------/---------/------------/--------------/------------------
# Hyprland socket2
socat -U - UNIX-CONNECT:$XDG_RUNTIME_DIR/hypr/$HYPRLAND_INSTANCE_SIGNATURE/.socket2.sock | while read -r line; do handle "$line"; done
